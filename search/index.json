[{"content":" Markdown 基本语法 | Markdown 教程\n标题语法 **#**数量代表标题级别\n#:一级\n##:二级\n强调语法 粗体 在单词或短语的前后各添加两个星号或下划线\n**a** -\u0026gt; a\nhello w**or**ld -\u0026gt; hello world\n斜体 在单词或短语前后添加一个星号或下划线\n*a* -\u0026gt; a\nw*or*ld -\u0026gt; world\n引用语法 块引用 段落前添加一个 \u0026gt; 符号\n\u0026gt; hello world\nhello world\n多段块引用enter就好了\n嵌套块引用 块引用可以嵌套。在要嵌套的段落前添加一个 \u0026gt;\u0026gt; 符号\nhello world\nhello wold\nhello world\n带有其它元素的块引用 块引用可以包含其他 Markdown 格式的元素\n一级 hello\nworld\nhello world !\n列表语法 有序列表 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\nFirst Second Third 无序列表 要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。\n- first\nfirst * second\nsecond + third\nthird 代码语法 将单词或短语表示为代码，请将其包裹在反引号 (\\) 中。\n`hello world` -\u0026gt; hello world\n转义反引号 如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(````)中。\n``hello `world`` -\u0026gt; hello `world\n代码块 在代码块之前和之后的行上使用三个反引号(`````）或三个波浪号（~~~）\n1 2 3 hello world ! 分割线语法 要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。\n链接语法 链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。\n超链接Markdown语法代码：[超链接显示名](超链接地址 \u0026quot;超链接title\u0026quot;)\n一个俗人的博客\n给链接增加 Title 链接title是当鼠标悬停在链接上时会出现的文字\n一个俗人的博客\n网址和Email地址 使用尖括号可以很方便地把URL或者email地址变成可点击的链接。\nhttps://gsygsr.github.io/\n带格式化的链接 点击访问原神**原神**\n引用类型链接 ","date":"2024-12-31T15:27:48+08:00","image":"https://gsygsr.github.io/dajian/markdown/1_hu3963ffc2b11462ca836321861c385f3c_182481_120x120_fill_q75_box_smart1.jpg","permalink":"https://gsygsr.github.io/dajian/markdown/","title":"Markdown"},{"content":"博客搭建 https://letere-gzj.github.io/hugo-stack/\n跟着博客就搭建完了\n到github自动部署这有些改动\n博客根目录/.github/workflows/自己起的名字.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-24.04 #ubuntu版本不能用latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;0.129.0\u0026#34; #这里要改成本地hugo的版本 git自动部署后推送 第一次推送是这样\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 后续推送只需要\n1 2 3 git add . git commit -m \u0026#34;first commit\u0026#34; git push 头像修改 文件路径:boke\\assets\\img\n图片命名为avatar.png\n优先加载主目录下的\n字体修改 下载字体\n100font.com - 免费商用字体大全 - 免费字体下载网站\n把字体文件放入assets/font下\n将以下代码修改并复制到layouts/partials/footer/custom.html文件中(文件不存在就自己创建)\n字体名：给字体命名一个别名，随便填写就好，保持统一就行\n字体文件名：字体文件的全名，带后缀名的，也就是 xxx.ttf\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;字体名\u0026#39;; src: url({{ (resources.Get \u0026#34;font/字体文件名\u0026#34;).Permalink }}) format(\u0026#39;truetype\u0026#39;); } :root { --base-font-family: \u0026#39;字体名\u0026#39;; --code-font-family: \u0026#39;字体名\u0026#39;; } \u0026lt;/style\u0026gt; 显示文章更新时间 (1) 在配置文件 hugo.yaml 中加入以下配置\n1 2 3 4 5 6 7 8 # 更新时间：优先读取git时间 -\u0026gt; git时间不存在，就读取本地文件修改时间 frontmatter: lastmod: - :git - :fileModTime # 允许获取Git信息\tenableGitInfo: true (2) 若想在文章开头就显示更新时间，修改layouts/partials/article/components/detail.html，在指定位置引入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; ... \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; ... \u0026lt;!-- 更新时间 --\u0026gt; {{- if ne .Lastmod .Date -}} \u0026lt;div class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time\u0026gt; {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} .... \u0026lt;/footer\u0026gt; ... \u0026lt;/div\u0026gt; 这样就会文章开头显示修改时间 tips: 更新时间的格式去 hugo.yaml 中的 params.dateFormat.lastUpdated 进行修改 友链、归档多列显示 修改assets/scss/custom.scss文件(不存在则自行创建)，引入以下css样式代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是两列，如需三列，则后面再加一个1fr，以此类推 grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 图片api https://t.mwm.moe/fj 二次元风景 https://imgapi.xl0408.top/index.php 直接把图片链接放到image\n用本地图片的话,绝对路径有点逆天,直接放到和文章同一文件夹就好了\n博客的一些设置 创建文章 一般用hugo命令创建文章的时候都是用的hugo new xxx/xxx/index.md\n尽量创建文章后命名用index.md来命名,否则图片会缺失\n文章会自带这些东西\n1 2 3 title = \u0026#39;Markdown\u0026#39; date = 2024-12-31T15:27:48+08:00 draft = true 但是如果想要文章封面的话需要加image等属性,每次都要手动加的话太麻烦\n找到博客根目录/archetypes/default.md\n1 2 3 4 5 6 7 8 9 10 11 title = \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date = {{ .Date }} draft = true author = \u0026#39;一个俗人\u0026#39; #想固定的就赋值 categories = [] image = \u0026#39;\u0026#39; #不想设置固定的就让他为空 description = \u0026#39;\u0026#39; 每次创建完文章后这些都会放在头上\n博客首页文章 博客首页的文章如果一开始删了content/post文件夹的话会导致首页没有文章\n如果想要更改放在首页的文章\n找到根目录下的hugo.yaml,打开搜索mainSections\n1 2 3 params: mainSections: - dajian # - 这里放文章文件夹的名字 然后网站首页就会显示这个文件夹里的文章了\n归档分类封面 根目录\\content\\categories\\分类的文件夹\n这里的md一定要为**_index.md**,否则不生效\n结语 博客一直都想着弄的,也是熬到2024的最后一天了(；´д｀)ゞ\n笔记都放到语雀上了,后续会放到博客上,本人菜鸡,大佬们勿喷d(´ω｀*)\n","date":"2024-12-31T14:54:43+08:00","image":"https://gsygsr.github.io/dajian/boke/0_hufacb938ae3fcb28eeaac68e6daac5c09_205100_120x120_fill_q75_box_smart1.jpg","permalink":"https://gsygsr.github.io/dajian/boke/","title":"博客搭建"}]